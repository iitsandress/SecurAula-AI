name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        cd backend
        flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        cd backend
        black --check app/ tests/
    
    - name: Type check with mypy
      run: |
        cd backend
        mypy app/ --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  test-agent:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
    
    - name: Install dependencies
      run: |
        cd agent
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        cd agent
        flake8 *.py core/ ui/ --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Format check with black
      run: |
        cd agent
        black --check *.py core/ ui/
    
    - name: Test agent core (non-GUI)
      run: |
        cd agent
        python -m pytest tests/ -v -k "not gui"

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security tools
      run: |
        pip install safety bandit
    
    - name: Run safety check
      run: |
        cd backend
        safety check -r requirements.txt
    
    - name: Run bandit security scan
      run: |
        cd backend
        bandit -r app/ -f json -o bandit-report.json
    
    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: backend/bandit-report.json

  build-docker:
    runs-on: ubuntu-latest
    needs: [test-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/edumon-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/edumon-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-agent:
    runs-on: ${{ matrix.os }}
    needs: [test-agent]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        cd agent
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build agent executable
      run: |
        cd agent
        pyinstaller --onedir --windowed --name EduMonAgent main.py
    
    - name: Upload agent artifact
      uses: actions/upload-artifact@v3
      with:
        name: edumon-agent-${{ matrix.os }}
        path: agent/dist/

  release:
    runs-on: ubuntu-latest
    needs: [build-docker, build-agent]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: version
      run: echo "VERSION=$(grep -oP 'APP_VERSION: str = \"\K[^\"]*' backend/app/core/config.py)" >> $GITHUB_OUTPUT
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        release_name: EduMon v${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: false